{"version":3,"sources":["logo.svg","CalculationLog.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CalculationLog","props","state","className","this","log","slice","reverse","map","value","index","key","React","Component","client","W3CWebSocket","ResultArea","operations","displayValue","firstOperand","waitingForSecondOperand","operator","users","history","onopen","send","JSON","stringify","data","type","onmessage","message","parse","setState","op","a","b","msg","input","parseFloat","previousDisplayValue","res","evaluate","item","length","includes","handleOperator","handleDecimal","handleClear","handlePosNeg","handleDigit","placeholder","id","rows","cols","readOnly","onClick","handleClickEvent","clearHistoryLog","title","App","src","reactLogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c1acf644.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './App.css';\n\nexport default class CalculationLog extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\n\t\t}\n\t}\n\n\t// All we need to render here are the calculation logs.\n\t// We iterate through the log props that is passed from\n\t// the Calculator component and dynamically create and\n\t// display the contents in most recent order.\n\trender() {\n\t\treturn (\n\t\t\t<div className='container'>\n\t\t\t\t<div className='log'>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<h2><u>Calculation Log (last 10, most recent first)</u></h2>\n\t\t\t\t\t{this.props.log.slice(0).reverse().map((value, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<p key={index}>{value}</p>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t\t<br/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport CalculationLog from './CalculationLog';\n\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nconst client = new W3CWebSocket('ws://127.0.0.1:1234');\n\nexport default class ResultArea extends React.Component {\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// List of acceptable operations\n\t\tthis.operations = ['รท', 'x', '-', '+', '='];\n\n\t\t// Our state will consist of the display value,\n\t\t// 1st/2nd operand value/status, current operator,\n\t\t// current # of users in the room, and history (log).\n\t\tthis.state = {\n\t\t\tdisplayValue: '0',\n\t\t\tfirstOperand: null,\n\t\t\twaitingForSecondOperand: false,\n\t\t\toperator: null,\n\t\t\tusers: 0,\n\t\t\thistory: [],\n\t\t}\n\t}\n\n\t// When component mounts, send a new connection message\n\t// and setup component to receive messages from server\n\tcomponentDidMount() {\n\t\tclient.onopen = () => {\n\t\t\t// console.log('WebSocket Client Connected');\n\t\t\tclient.send(JSON.stringify({data: \"new connect\", type: 'userEvent'}));\n\t\t};\n\n\t\tclient.onmessage = (message) => {\n\t\t\t// console.log('Got message from server!');\n\t\t\tconst data = JSON.parse(message.data);\n\t\t\tif (data.type === 'userEvent') {\n\t\t\t\tthis.setState({\n\t\t\t\t\tusers: data.data,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState(data);\n\t\t\t}\n\t\t};\n\t}\n\n\t// Return the arithmetic value of our parameters\n\tevaluate(op, a, b) {\n\t\tswitch(op) {\n\t\t\tcase 'รท':\n\t\t\t\treturn a/b;\n\t\t\tcase 'x':\n\t\t\t\treturn a*b;\n\t\t\tcase '-':\n\t\t\t\treturn a-b;\n\t\t\tcase '+':\n\t\t\t\treturn a+b;\n\t\t\tcase '=':\n\t\t\t\treturn b;\n\t\t\tdefault:\n\t\t\t\treturn b;\n\t\t}\n\t}\n\n\t// Operator handler. We update our display value everytime \n\t// an operator is pressed, and based on various state values\n\t// we may perform an evaluation to get an answer.\n\thandleOperator(op) {\n\t\tlet msg = '';\n\t\tlet input = parseFloat(this.state.displayValue);\n\n\t\t// If we have already selected an operator and press another operator\n\t\tif (this.state.operator && this.state.waitingForSecondOperand) {\n\t\t\treturn {\n\t\t\t\toperator: op,\n\t\t\t};\n\t\t}\n\n\t\t// First operand, if not set already, is now whatever is currently\n\t\t// on the screen/displayValue. \n\t\tif (this.state.firstOperand === null) {\n\t\t\tmsg = {\n\t\t\t\tfirstOperand: input,\n\t\t\t};\n\n\t\t// Otherwise if we press an operator and already have firstOperand \n\t\t// *and* a display value\n\t\t} else if (this.state.operator) {\n\t\t\tlet previousDisplayValue = this.state.firstOperand || 0;\n\n\t\t\t// Get current result of the \"previous\" operator (most recent one\n\t\t\t// we pressed before this current operator) evaluated between\n\t\t\t// the previousDisplayValue and input (current displayValue);\n\t\t\tlet res = this.evaluate(this.state.operator, previousDisplayValue, input);\n\t\t\t\n\t\t\t// Update message to be sent to server and re-emitted to all clients\n\t\t\tmsg = {\n\t\t\t\tdisplayValue: res,\n\t\t\t\tfirstOperand: res,\n\t\t\t};\n\n\t\t\t// If any evaluation was made and the last one wasn't an equals\n\t\t\t// sign, then we update our calculation log. \n\t\t\tif (this.state.operator !== '=') {\n\t\t\t\tlet item = previousDisplayValue + ' ' + this.state.operator + ' ' + input + ' = ' + res;\n\t\t\t\tif (this.state.history.length < 10) {\n\t\t\t\t\tmsg['history'] = [...this.state.history, item];\t\n\t\t\t\t} else {\n\t\t\t\t\tmsg['history'] = [...this.state.history.slice(1), item];\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\n\t\t// Now displayValue is updated and we have a firstOperand,\n\t\t// set the state values to new updated operator et al.\n\t\tmsg['waitingForSecondOperand'] = true;\n\t\tmsg['operator'] = op;\n\n\t\treturn msg;\n\t}\n\n\t// Insert decimal into displayValue\n\thandleDecimal() {\n\t\tlet msg = ''\n\t\tif (this.state.waitingForSecondOperand) return msg;\n\n\t\tif (!this.state.displayValue.includes('.')) {\n\t\t\tmsg = {\n\t\t\t\tdisplayValue: this.state.displayValue + '.',\n\t\t\t};\n\t\t}\n\t\treturn msg;\n\t}\n\n\t// Reset state\n\thandleClear() {\n\t\treturn {\n\t\t\tdisplayValue: '0',\n\t\t\tfirstOperand: null,\n\t\t\twaitingForSecondOperand: false,\n\t\t\toperator: null,\n\t\t};\n\t}\n\n\t// Swap +/- sign\n\thandlePosNeg() {\n\t\treturn {\n\t\t\tdisplayValue: this.state.displayValue === '0' ? '0' : (-1 * parseFloat(this.state.displayValue)),\n\t\t};\n\t}\n\n\t// Handle digits. If we press a digit and we are still waiting\n\t// for a second operand, then update displayvalue and set it \n\t// to false. Otherwise just add on the digit as a 2/3/4...digit number\n\thandleDigit(value) {\n\t\tlet msg = '';\n\t\tif (this.state.waitingForSecondOperand) {\n\t\t\tmsg = {\n\t\t\t\tdisplayValue: value,\n\t\t\t\twaitingForSecondOperand: false,\n\t\t\t};\n\t\t} else {\n\t\t\tmsg = {\n\t\t\t\tdisplayValue: this.state.displayValue === '0' ? value : this.state.displayValue + value,\n\t\t\t};\n\t\t}\n\t\treturn msg;\n\t}\n\n\t// Clear history log by sending a blank log back to server to be emitted\n\tclearHistoryLog() {\n\t\tclient.send(JSON.stringify({data: {history: []}, type: 'clickEvent'}));\n\t}\n\n\t// Button onClick event handler\n\thandleClickEvent(value) {\n\t\tlet message = '';\n\t\tif (this.operations.includes(value)) {\n\t\t\tmessage = this.handleOperator(value);\n\t\t} else if (value === '.') {\n\t\t\tmessage = this.handleDecimal();\n\t\t} else if (value === 'AC') {\n\t\t\tmessage = this.handleClear();\n\t\t} else if (value === '+/-') {\n\t\t\tmessage = this.handlePosNeg();\n\t\t} else {\n\t\t\tmessage = this.handleDigit(value);\n\t\t}\n\n\t\t// Send the state to be updated as a message\n\t\tclient.send(JSON.stringify({data: message, type: 'clickEvent'}));\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<div className='card'>\n\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t<h2>Connected users: {this.state.users}</h2>\n\t\t\t\t\t\t<textarea placeholder='Enter a calculation' id='result' rows='1' cols='20' value={this.state.displayValue} readOnly={true}>\n\t\t\t\t\t\t</textarea>\n\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t<button className='allClearButton' onClick={() => this.handleClickEvent('AC')}>AC</button>\n\t\t\t\t\t\t<button className='clearLogButton' onClick={() => this.clearHistoryLog()} title='Clear Log'>C.L.</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('+/-')}>+/-</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('รท')}>รท</button>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('7')}>7</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('8')}>8</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('9')}>9</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('x')}>x</button>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('4')}>4</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('5')}>5</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('6')}>6</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('-')}>-</button>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('1')}>1</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('2')}>2</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('3')}>3</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('+')}>+</button>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<button className='zeroButton' onClick={() => this.handleClickEvent('0')}>0</button>\n\t\t\t\t\t\t<button className='calculatorButton' onClick={() => this.handleClickEvent('.')}>.</button>\n\t\t\t\t\t\t<button className='equalsButton' onClick={() => this.handleClickEvent('=')}>=</button>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<br/><br/><br/>\n\t\t\t\t\t\t<CalculationLog log={this.state.history}/>\n\t\t\t\t\t\t<br/><br/><br/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import React from 'react';\nimport Calculator from './Calculator.js';\nimport reactLogo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>React Collab-culator</h1>\n\t\t\t\t<img className='appLogo' src={reactLogo}/>\n\t\t\t\t<Calculator/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}